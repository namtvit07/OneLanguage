- def randMessage()
  - [true, false].sample ? Faker::Lorem.sentence : ""

.alert.alert-warning{class: "#{@channel.ended_at ? '' : 'display-none'}"}
  %button.close{"data-dismiss" => "alert"}> Ã—
  This conversation was ended. You're in read only mode.

- content_for :channel_name do
  .channel-name-title
    = @channel.name.truncate(70)

.channel-show
  .chat-header
    = render "header"
  .chat-content
    %table.channel-table{class: "#{@translator ? 'three-column': 'two-column'}"}
      %tbody
        - (1..0).each do |i|
          - owner_msg = randMessage
          - translator_msg = randMessage
          - partner_msg = randMessage
          = render "message", owner_msg: owner_msg, translator_msg: translator_msg, partner_msg: partner_msg, from_owner: (i%2 == 1)
  - unless @translator || @channel.ended_at
    .chat-footer
      %textarea#chat-input{autofocus: true, placeholder: "Type your message here"}
      .upload-wrapper{title: "Attach files", "data-toggle" => "tooltip"}
        %i{class: 'fa fa-paperclip'}
        %input#fileupload{type: "file", name: "files[]", multiple: true}
      - if @role == 'owner'
        .pull-right
          %button.btn.btn-primary(data-toggle="modal" data-target="#channel-link-modal")
            Get Channel Links
          = link_to 'End This Conversation', end_conversation_channel_path(@channel), class: 'btn btn-danger', method: :put

= render "channel_link_modal"
:javascript
  var role = "#{@role}";
  var g_currentUser = {
    id: '#{@uuid}',
    name: "#{current_user.name}",
    role: "#{@role}",
    avatar: "#{current_user.avatar.url}"
  };
  var messenger = null,
    chattingHelper = null,
    isBlurred = false,
    timerId = -1,
    typingTimerId = null,
    translatingTimerId = null,
    notificationPermission = 1,
    chatChannel = '#{@channel.uuid}',
    messageContent = $('#chat-input'),
    sendMessageButton = $('#btn-submit'),
    leaveButton = $('#btn-leave');

  function showEndedChannel(){
    $('.alert').show();
    $('.chat-footer').remove();
    $('textarea').prop('disabled', true);
  }

  function handleMessage(message){
    switch(message.type) {
      case 'message':
        showMessage(message);
        break;
      case 'user_subscribe':
        toggleOnlineUser(message, true);
        break;
      case 'attachment':
        showAttachment(message);
        break;
      case 'translating':
        showTranslating(message);
        break;
      case 'typing':
        showTyping(message);
        break;
      case 'edit':
        showEditMessage(message);
        break;
      case 'end_channel':
        showEndedChannel();
        break;
    }

    if (isBlurred && message.type == 'message') {
      // Flash title if blurred
      clearInterval(timerId);
      timerId = setInterval(function () {
        document.title = document.title == "1language" ? "New Message" : "1language";
      }, 500);
    }
  };

  function showMessage(m){
    chattingHelper.showMessage(m);
  }

  function showTyping(m){
    chattingHelper.showTypingMessage(m);
  }

  function showEditMessage(m){
    chattingHelper.showEditMessage(m);
  }

  function showAttachment(m){
    chattingHelper.showAttachmentMessage(m);
  }

  function showTranslating(m){
    chattingHelper.showTranslatingMessage(m);
  }

  function toggleOnlineUser(m, isOnline){
    if(isOnline){
      //Create if this user of this role is not exist
      if(!$('.user-updated#avatar-' + m.uuid).size()){
        user = {
          avatar_type: m.role + "-avatar_type",
          avatar_url: m.avatar,
          channel_user_id: m.uuid,
          channel_language: (m.role == "partner" ? "#{@channel.partner_language}" : ""),
          name: m.name
        }
        templete = JST["channels/user_info"]({user: user, is_exist: true});
        $('.' + m.role +'-info-area').empty();
        $('.' + m.role +'-info-area').append(templete);
      }

      $('.' + m.role + '-avatar').attr('id', 'avatar-' + m.uuid);
      $('.' + m.role + '-avatar').addClass('online');
    }else{
      $('#avatar-' + m.uuid).removeClass('online');
    }
  }

  function sendPartnerMessage(){
    var message = messageContent.val();
    if(message !== "") {
      message =  {
        message: message,
        sender_id: g_currentUser.id,
        sender_role: '#{@role}',
        type: 'message',
        message_ref: new Date().getTime()
      };
      messenger.publish({
        channel: chatChannel,
        message: message
      });
      messageContent.val("");
    }
  }

  function sendTranslateMessage(el){
    var message = el.val().trim();
    var message_ref = el.attr('m_ref');
    var original_uid = el.attr('u_id');
    var original_role = el.attr('o_role');
    var isUpdating = el.hasClass("has-message")

    if(message !== "") {
      if (isUpdating){
        message = {
          type: 'edit',
          message_ref: message_ref,
          new_content: message,
          message: message,
          old_content: el.attr("old-message"),
          sender_role: '#{@role}',
          original_role: original_role,
          original_sender_id: original_uid,
          updated_at: new Date().getTime()
        }
      } else {
        message =  {
          message: message,
          sender_id: g_currentUser.id,
          original_sender_id: original_uid,
          original_role: original_role,
          sender_role: '#{@role}',
          type: 'message',
          message_ref: message_ref
        };
      }

      messenger.publish({
        channel: chatChannel,
        message: message
      });
      el.blur();
    }
  }

  function sendTranslating(sendStart, el){
    var message_ref = el.attr('m_ref');
    var original_uid = el.attr('u_id');
    message = {
      message_ref: message_ref,
      original_uid: original_uid,
      start: sendStart,
      type: 'translating'
    };
    messenger.publish({
      channel: chatChannel,
      message: message
    });
  }

  function sendTyping(sendStart){
    message = {
      sender_id: g_currentUser.id,
      sender_role: "#{@role}",
      start: sendStart,
      type: 'typing'
    };
    messenger.publish({
      channel: chatChannel,
      message: message
    });
  }


  $(function(){
    chattingHelper = new ChattingHelper("#{@role}", $('.channel-table tbody'), g_currentUser)
    messenger = new Messenger('pub-c-547232aa-3488-4d2d-8cbb-2fd4072a0697', 'sub-c-ccf40038-78ac-11e4-a5ea-02ee2ddab7fe');
    messenger.connect(g_currentUser.id);
    toggleOnlineUser({role: g_currentUser.role, uuid: g_currentUser.id}, true)
    // Blur tracking
    $(window).on('blur', function () {
      isBlurred = true;
    }).on("focus", function () {
      isBlurred = false;
      clearInterval(timerId);
      document.title = "1language";
    });

    window.onbeforeunload = function(e) {
      messenger.unsubscribe({
        channel: chatChannel
      });
    };

    // Submit message when translator enter form textarea
    $(document).on('keypress', '.translate-input', function(e){
      var el = $(this);
      if(e.which == 13 && !e.shiftKey) {
        sendTranslateMessage(el);
        return false;
      }else{
        if(!el.hasClass('has-message')){
          if(translatingTimerId){
            clearTimeout(translatingTimerId);
            translatingTimerId = setTimeout(function(){
              sendTranslating(false, el);
              translatingTimerId = null;
            }, 3000);
          }else{
            sendTranslating(true, el);
            translatingTimerId = setTimeout(function(){
              sendTranslating(false, el);
              translatingTimerId = null;
            }, 3000);
          }
        }
      }
    });

    // Submit message when partner enter from textarea
    messageContent.keypress(function(e) {
      if(e.which == 13 && !e.shiftKey) {
        sendPartnerMessage();
        return false;
      }else{
        if(typingTimerId){
          clearTimeout(typingTimerId);
          typingTimerId = setTimeout(function(){
            sendTyping(false);
            typingTimerId = null;
          }, 3000);
        }else{
          sendTyping(true);
          typingTimerId = setTimeout(function(){
            sendTyping(false);
            typingTimerId = null;
          }, 3000);
        }
      }
    });

    // Bind send message button
    sendMessageButton.click(function (event) {
      sendPartnerMessage()
    });

    // Bind leave button
    leaveButton.click(function (event) {
      messenger.unsubscribe({
        channel: chatChannel
      });
      window.location = '/';
    });

    messenger.subscribe({
      channel: chatChannel,
      message: handleMessage,
      presence: function( message, env, channel ) {
        if(message.action == 'leave'){
          toggleOnlineUser(message, false);
        }
        if(message.action == 'join'){
          $('#avatar-' + message.uuid).addClass('online');
        }
        messenger.connection.here_now({
          channel: chatChannel,
          callback: function(m){
            $.each(m.uuids, function(index, value){
              $('#avatar-' + value).addClass('online');
            });
          }
        });
      }
    });

    // Handle chat history
    messenger.history({
      channel: chatChannel
    }, function (messages) {
      messages = messages[0];

      for(var i = 0; i < messages.length; i++) {
        if(messages[i].type == 'message' || messages[i].type == 'attachment' || messages[i].type== 'edit'){
          handleMessage(messages[i])
        }
      }
      if(#{@channel.ended_at.present?}){
        $('textarea').prop('disabled', true);
      }
    });

    // Send message subscribe
    var message = {
      uuid: g_currentUser.id,
      role: "#{@role}",
      type: 'user_subscribe',
      name: g_currentUser.name,
      avatar: g_currentUser.avatar
    }

    messenger.publish({
      channel: chatChannel,
      message: message
    });

    messenger.connection.here_now({
      channel: chatChannel,
      callback: function(m){
        $.each(m.uuids, function(index, value){
          $('#avatar-' + value).addClass('online');
        });
      }
    });
  });


:javascript
  new Uploader(#{@channel.id}, '#{@channel.uuid}', '#{@role}');
